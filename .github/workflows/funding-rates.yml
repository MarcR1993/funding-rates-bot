name: 🚀 Funding Rates Bot Complet

on:
  schedule:
    - cron: '0 6,14,22 * * *'
  workflow_dispatch:

jobs:
  collect:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📚 Install dependencies
      run: pip install requests gspread google-auth
      
    - name: 🔑 Setup credentials
      run: echo '${{ secrets.GOOGLE_CREDENTIALS }}' > credentials.json
      
    - name: 🚀 Collect & Save Data
      run: |
        python3 -c "
        import requests, gspread, time
        from datetime import datetime
        from google.oauth2.service_account import Credentials
        
        print('🚀 Démarrage collecte funding rates...')
        
        # Google Sheets setup
        scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        creds = Credentials.from_service_account_file('credentials.json', scopes=scope)
        gc = gspread.authorize(creds)
        sheet = gc.open_by_key('${{ secrets.SHEET_ID }}')
        
        try:
            worksheet = sheet.worksheet('Funding Rates')
        except:
            worksheet = sheet.add_worksheet(title='Funding Rates', rows='1000', cols='10')
            worksheet.append_row(['Timestamp', 'Date', 'Exchange', 'Symbol', 'Funding_Rate_%', 'Next_Funding_Time', 'Status'])
        
        print('✅ Google Sheets connecté')
        
        # Collecte données
        rows = []
        timestamp = int(time.time())
        date_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # Binance
        print('🔄 Collecte Binance...')
        try:
            symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT', 'DOTUSDT', 'LINKUSDT', 'MATICUSDT']
            binance_data = requests.get('https://fapi.binance.com/fapi/v1/premiumIndex', timeout=10).json()
            
            for item in binance_data:
                if item.get('symbol') in symbols:
                    rate = float(item.get('lastFundingRate', 0)) * 100
                    status = '🔴 LONG PAY' if rate > 0.1 else '🟢 SHORT PAY' if rate < -0.1 else '🟡 NEUTRAL'
                    next_time = datetime.fromtimestamp(int(item.get('nextFundingTime', 0))/1000).strftime('%Y-%m-%d %H:%M:%S')
                    rows.append([timestamp, date_str, 'Binance', item['symbol'], round(rate, 4), next_time, status])
            
            print(f'✅ Binance: {len([r for r in rows if r[2] == \"Binance\"])} cryptos')
        except Exception as e:
            print(f'❌ Erreur Binance: {e}')
        
        # KuCoin
        print('🔄 Collecte KuCoin...')
        try:
            kucoin_symbols = ['XBTUSDTM', 'ETHUSDTM', 'ADAUSDTM', 'SOLUSDTM', 'LINKUSDTM', 'MATICUSDTM']
            for sym in kucoin_symbols:
                try:
                    r = requests.get(f'https://api-futures.kucoin.com/api/v1/funding-rate/{sym}/current', timeout=10)
                    data = r.json()
                    if data.get('code') == '200000' and 'data' in data:
                        rate = float(data['data'].get('value', 0)) * 100
                        status = '🔴 LONG PAY' if rate > 0.1 else '🟢 SHORT PAY' if rate < -0.1 else '🟡 NEUTRAL'
                        next_time = datetime.fromtimestamp(int(data['data'].get('timePoint', 0))/1000).strftime('%Y-%m-%d %H:%M:%S')
                        symbol = sym.replace('USDTM', '').replace('XBT', 'BTC') + 'USDT'
                        rows.append([timestamp, date_str, 'KuCoin', symbol, round(rate, 4), next_time, status])
                    time.sleep(0.1)
                except:
                    continue
            
            print(f'✅ KuCoin: {len([r for r in rows if r[2] == \"KuCoin\"])} cryptos')
        except Exception as e:
            print(f'❌ Erreur KuCoin: {e}')
        
        # Sauvegarder
        if rows:
            worksheet.append_rows(rows)
            print(f'✅ {len(rows)} lignes ajoutées à Google Sheets')
            print('🎯 Collecte terminée avec succès!')
            for row in rows:
                print(f'  {row[2]} {row[3]}: {row[4]}%')
        else:
            print('❌ Aucune donnée collectée')
        "
